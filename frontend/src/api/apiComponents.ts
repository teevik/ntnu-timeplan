/**
 * Generated by @openapi-codegen
 *
 * @version 0.1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type GetSemestersError = Fetcher.ErrorWrapper<undefined>;

export type GetSemestersVariables = ApiContext["fetcherOptions"];

export const fetchGetSemesters = (
  variables: GetSemestersVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.SemestersWithCurrent,
    GetSemestersError,
    undefined,
    {},
    {},
    {}
  >({ url: "/semesters", method: "get", ...variables, signal });

export const useGetSemesters = <TData = Schemas.SemestersWithCurrent>(
  variables: GetSemestersVariables = {},
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.SemestersWithCurrent,
      GetSemestersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.SemestersWithCurrent,
    GetSemestersError,
    TData
  >(
    queryKeyFn({ path: "/semesters", operationId: "getSemesters", variables }),
    ({ signal }) =>
      fetchGetSemesters({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetCoursesError = Fetcher.ErrorWrapper<undefined>;

export type GetCoursesResponse = {
  [key: string]: Schemas.Course;
};

export type GetCoursesVariables = ApiContext["fetcherOptions"];

export const fetchGetCourses = (
  variables: GetCoursesVariables,
  signal?: AbortSignal
) =>
  apiFetch<GetCoursesResponse, GetCoursesError, undefined, {}, {}, {}>({
    url: "/courses",
    method: "get",
    ...variables,
    signal,
  });

export const useGetCourses = <TData = GetCoursesResponse>(
  variables: GetCoursesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetCoursesResponse, GetCoursesError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetCoursesResponse, GetCoursesError, TData>(
    queryKeyFn({ path: "/courses", operationId: "getCourses", variables }),
    ({ signal }) =>
      fetchGetCourses({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetActivitiesQueryParams = {
  courseCode: string;
  /**
   * @format int32
   */
  courseTerm: number;
  semester: string;
};

export type GetActivitiesError = Fetcher.ErrorWrapper<undefined>;

export type GetActivitiesResponse = Schemas.Activity[];

export type GetActivitiesVariables = {
  queryParams: GetActivitiesQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGetActivities = (
  variables: GetActivitiesVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    GetActivitiesResponse,
    GetActivitiesError,
    undefined,
    {},
    GetActivitiesQueryParams,
    {}
  >({ url: "/activities", method: "get", ...variables, signal });

export const useGetActivities = <TData = GetActivitiesResponse>(
  variables: GetActivitiesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetActivitiesResponse,
      GetActivitiesError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<GetActivitiesResponse, GetActivitiesError, TData>(
    queryKeyFn({
      path: "/activities",
      operationId: "getActivities",
      variables,
    }),
    ({ signal }) =>
      fetchGetActivities({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetEncodedCalendarQueryError = Fetcher.ErrorWrapper<undefined>;

export type GetEncodedCalendarQueryRequestBody = Schemas.CalendarQuery[];

export type GetEncodedCalendarQueryVariables = {
  body?: GetEncodedCalendarQueryRequestBody;
} & ApiContext["fetcherOptions"];

export const fetchGetEncodedCalendarQuery = (
  variables: GetEncodedCalendarQueryVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    GetEncodedCalendarQueryError,
    GetEncodedCalendarQueryRequestBody,
    {},
    {},
    {}
  >({ url: "/encode-calendar-query", method: "post", ...variables, signal });

export const useGetEncodedCalendarQuery = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      GetEncodedCalendarQueryError,
      GetEncodedCalendarQueryVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    GetEncodedCalendarQueryError,
    GetEncodedCalendarQueryVariables
  >(
    (variables: GetEncodedCalendarQueryVariables) =>
      fetchGetEncodedCalendarQuery({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/semesters";
      operationId: "getSemesters";
      variables: GetSemestersVariables;
    }
  | {
      path: "/courses";
      operationId: "getCourses";
      variables: GetCoursesVariables;
    }
  | {
      path: "/activities";
      operationId: "getActivities";
      variables: GetActivitiesVariables;
    };
